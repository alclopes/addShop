{"ast":null,"code":"var _jsxFileName = \"/home/andre/zAlclopes/MyIgnite/React/Desafios/0201_AddShop/addShop_React/src/hooks/useCart.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\n// tags: #alterado21/09/2021# - OK\nimport { createContext, useContext, useState } from 'react';\nimport { toast } from 'react-toastify';\nimport { api } from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CartContext = /*#__PURE__*/createContext({});\nexport function CartProvider({\n  children\n}) {\n  _s();\n\n  const [cart, setCart] = useState(() => {\n    // recuperando item na storage - Andre - 21/09/2021\n    const storagedCart = localStorage.getItem('@RocketShoes:cart');\n\n    if (storagedCart) {\n      return JSON.parse(storagedCart);\n    }\n\n    return [];\n  }); // incluindo produto na storage - Andre - 21/09/2021\n\n  const addProduct = async productId => {\n    try {\n      // recuperando itens do carrinho atual\n      const updatedCart = cart.map(product => ({ ...product\n      })); // produto existe no carrinho atual \n\n      const productAlreadyExist = updatedCart.find(item => item.id === productId); // recuperando produto no estoque\n\n      const stock = await api.get(`/stock/${productId}`); //checar quantia no estoque\n\n      const stockAmount = stock.data.amount; //console.log(\"stockAmount: \" + stockAmount);\n      //checar quantidade item do mesmo produto no carrinho\n\n      const currentAmount = productAlreadyExist ? productAlreadyExist.amount : 0; //console.log(\"currentAmount \" + currentAmount);\n      //Incrementa montante do item\n\n      const amount = currentAmount + 1;\n\n      if (productAlreadyExist) {\n        // atualiza montante no item\n        productAlreadyExist.amount = amount;\n      } else {\n        // recupera dados do produto por id\n        const product = await api.get(`/products/${productId}`); // cria objeto newProduct para ser inserido\n\n        const newProduct = { ...product.data,\n          amount: 1\n        }; // console.log(newProduct);\n        // atualiza carrinho com novo produto.\n\n        updatedCart.push(newProduct);\n      } //checar quantidade em realação ao estoque\n\n\n      if (amount > stockAmount) {\n        toast.error(\"Quantidade solicitada fora de estoque\");\n        return;\n      }\n\n      setCart(updatedCart);\n      localStorage.setItem(\"@RocketShoes:cart\", JSON.stringify(updatedCart));\n    } catch {\n      // Todo: Tratando error: \"Product not exist/finished at Stock \"\n      toast.error(\"Erro na adição do produto\");\n    }\n  };\n\n  const removeProduct = productId => {\n    try {\n      const updatedCart = cart.map(product => ({ ...product\n      }));\n      const productIdx = updatedCart.findIndex(product => product.id === productId);\n\n      if (productIdx >= 0) {\n        updatedCart.splice(productIdx, 1);\n        setCart(updatedCart);\n        localStorage.setItem(\"@RocketShoes:cart\", JSON.stringify(updatedCart));\n      } else {\n        throw Error();\n      }\n    } catch {\n      toast.error(\"Erro na remoção do produto\");\n    }\n  };\n\n  const updateProductAmount = async ({\n    productId,\n    amount\n  }) => {\n    try {\n      if (amount <= 0) {\n        return;\n      } //pegar item em estoque pelo id do produto\n\n\n      const stock = await api.get(`/stock/${productId}`); //checar quantia no estoque\n\n      const stockAmount = stock.data.amount;\n\n      if (amount > stockAmount) {\n        toast.error(\"Quantidade solicitada fora de estoque\");\n        return;\n      }\n\n      const updatedCart = cart.map(product => ({ ...product\n      }));\n      const productAlreadyExist = updatedCart.find(item => item.id === productId);\n\n      if (productAlreadyExist) {\n        productAlreadyExist.amount = amount;\n        setCart(updatedCart);\n        localStorage.setItem(\"@RocketShoes:cart\", JSON.stringify(updatedCart));\n      } else {\n        throw Error();\n      }\n    } catch {\n      toast.error(\"Erro na alteração de quantidade do produto\");\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: {\n      cart,\n      addProduct,\n      removeProduct,\n      updateProductAmount\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 156,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CartProvider, \"08Raoh4VFbEK6Z/HPkwU/xTL6HE=\");\n\n_c = CartProvider;\nexport function useCart() {\n  _s2();\n\n  const context = useContext(CartContext);\n  return context;\n}\n\n_s2(useCart, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"sources":["/home/andre/zAlclopes/MyIgnite/React/Desafios/0201_AddShop/addShop_React/src/hooks/useCart.tsx"],"names":["createContext","useContext","useState","toast","api","CartContext","CartProvider","children","cart","setCart","storagedCart","localStorage","getItem","JSON","parse","addProduct","productId","updatedCart","map","product","productAlreadyExist","find","item","id","stock","get","stockAmount","data","amount","currentAmount","newProduct","push","error","setItem","stringify","removeProduct","productIdx","findIndex","splice","Error","updateProductAmount","useCart","context"],"mappings":"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","sourcesContent":["// tags: #alterado21/09/2021# - OK\n\nimport { createContext, ReactNode, useContext, useState } from 'react';\nimport { toast } from 'react-toastify';\nimport { api } from '../services/api';\nimport { Product, Stock } from '../types';\n\n// interface para receber qualquer elemento que venha como children do provider\ninterface CartProviderProps {\n  children: ReactNode;\n}\n\n// interface com dados para alterar o contexto do carrinho\ninterface UpdateProductAmount {\n  productId: number;\n  amount: number;\n}\n\n// interface que irá manter o contexto (browser, dados e funcionalidades)\ninterface CartContextData {\n  cart: Product[];\n  addProduct: (productId: number) => Promise<void>;\n  removeProduct: (productId: number) => void;\n  updateProductAmount: ({ productId, amount }: UpdateProductAmount) => void;\n}\n\nconst CartContext = createContext<CartContextData>({} as CartContextData);\n\nexport function CartProvider({ children }: CartProviderProps): JSX.Element {\n  const [cart, setCart] = useState<Product[]>(() => {\n\n    // recuperando item na storage - Andre - 21/09/2021\n    const storagedCart = localStorage.getItem('@RocketShoes:cart');\n\n    if (storagedCart) {\n      return JSON.parse(storagedCart);\n    }\n\n    return [];\n  });\n\n  // incluindo produto na storage - Andre - 21/09/2021\n  const addProduct = async (productId: number) => {\n    try {\n      // recuperando itens do carrinho atual\n      const updatedCart = cart.map((product) => ({ ...product}))\n\n      // produto existe no carrinho atual \n      const productAlreadyExist = updatedCart.find((item) => item.id === productId)\n\n      // recuperando produto no estoque\n      const stock = await api.get(`/stock/${productId}`)\n      \n      //checar quantia no estoque\n      const stockAmount = stock.data.amount;\n      //console.log(\"stockAmount: \" + stockAmount);\n\n      //checar quantidade item do mesmo produto no carrinho\n      const currentAmount = productAlreadyExist ? productAlreadyExist.amount : 0;\n      //console.log(\"currentAmount \" + currentAmount);\n\n      //Incrementa montante do item\n      const amount = currentAmount + 1;\n\n      if (productAlreadyExist) {\n        // atualiza montante no item\n        productAlreadyExist.amount = amount;\n      } else {\n        // recupera dados do produto por id\n        const product = await api.get(`/products/${productId}`);\n        // cria objeto newProduct para ser inserido\n        const newProduct = {\n          ...product.data,\n          amount: 1,\n        };\n        // console.log(newProduct);\n\n        // atualiza carrinho com novo produto.\n        updatedCart.push(newProduct);\n      }\n\n      //checar quantidade em realação ao estoque\n      if (amount > stockAmount) {\n        toast.error(\"Quantidade solicitada fora de estoque\");\n        return;\n      }\n\n      setCart(updatedCart);\n      localStorage.setItem(\"@RocketShoes:cart\", JSON.stringify(updatedCart));\n\n\n\n     } catch {\n      // Todo: Tratando error: \"Product not exist/finished at Stock \"\n      toast.error(\"Erro na adição do produto\");\n    }\n  };\n\n  const removeProduct = (productId: number) => {\n    try {\n      const updatedCart = cart.map((product) => ({ ...product }));\n\n      const productIdx = updatedCart.findIndex(\n        (product) => product.id === productId\n      );\n\n      if (productIdx >= 0) {\n        updatedCart.splice(productIdx, 1);\n\n        setCart(updatedCart);\n        localStorage.setItem(\"@RocketShoes:cart\", JSON.stringify(updatedCart));\n      } else {\n        throw Error();\n      }\n    } catch {\n      toast.error(\"Erro na remoção do produto\");\n    }\n  };\n\n  const updateProductAmount = async ({\n    productId,\n    amount,\n  }: UpdateProductAmount) => {\n    try {\n      if (amount <= 0) {\n        return;\n      }\n\n      //pegar item em estoque pelo id do produto\n      const stock = await api.get(`/stock/${productId}`);\n\n      //checar quantia no estoque\n      const stockAmount = stock.data.amount;\n\n      if (amount > stockAmount) {\n        toast.error(\"Quantidade solicitada fora de estoque\");\n        return;\n      }\n\n      const updatedCart = cart.map((product) => ({ ...product }));\n      const productAlreadyExist = updatedCart.find((item) => item.id === productId);\n\n      if (productAlreadyExist) {\n        productAlreadyExist.amount = amount;\n        setCart(updatedCart);\n        localStorage.setItem(\"@RocketShoes:cart\", JSON.stringify(updatedCart));\n      } else {\n        throw Error();\n      }\n    } catch {\n      toast.error(\"Erro na alteração de quantidade do produto\");\n    }\n  };\n\n  return (\n    <CartContext.Provider\n      value={{ cart, addProduct, removeProduct, updateProductAmount }}\n    >\n      {children}\n    </CartContext.Provider>\n  );\n}\n\nexport function useCart(): CartContextData {\n  const context = useContext(CartContext);\n\n  return context;\n}\n"]},"metadata":{},"sourceType":"module"}