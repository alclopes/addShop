{"ast":null,"code":"var _jsxFileName = \"/home/andre/zAlclopes/MyIgnite/React/Desafios/0201_AddShop/addShop_React/src/hooks/useCart.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\n// tags: #alterado21/09/2021# - OK\nimport { createContext, useContext, useState } from 'react';\nimport { toast } from 'react-toastify';\nimport { api } from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// criando contexto vazio\nconst CartContext = /*#__PURE__*/createContext({}); // criando provider (CartProvider) será usado para encapsular no App\n\nexport function CartProvider({\n  children\n}) {\n  _s();\n\n  // criando hook do carrinho\n  const [cart, setCart] = useState(() => {\n    // recuperando carrinho na storage - Andre - 21/09/2021\n    const storagedCart = localStorage.getItem('@RocketShoes:cart'); // a storage armazena em texto convertendo para json\n\n    if (storagedCart) {\n      return JSON.parse(storagedCart);\n    }\n\n    return [];\n  }); // incluindo produto no carrinho, depois na storage - Andre - 21/09/2021\n\n  const addProduct = async productId => {\n    try {\n      // recuperando itens do carrinho atual\n      const updatedCart = cart.map(product => ({ ...product\n      })); // recuperando quantidae de produto no estoque\n\n      const stock = await api.get(`/stock/${productId}`); // BoaPratica: Bloquear quantidade de produto no estoque\n      //recuperando quantia no estoque do produto\n\n      const stockAmount = stock.data.amount;\n\n      if (stockAmount < 1) {\n        toast.error(\"Quantidade solicitada fora de estoque\");\n        return;\n      } // recuperando produto se já existir no carrinho atual \n\n\n      const productAlreadyExist = updatedCart.find(item => item.id === productId); // se recuperou produto\n\n      if (productAlreadyExist) {\n        // recuperando quantidade do produto já no carrinho carrinho\n        const currentAmount = productAlreadyExist ? productAlreadyExist.amount : 0; //Incrementa montante do item\n\n        const amount = currentAmount + 1; //checar montante em relação ao estoque\n\n        if (amount > stockAmount) {\n          toast.error(\"Quantidade solicitada fora de estoque\");\n          return;\n        } // atualiza montante no item existente\n\n\n        productAlreadyExist.amount = amount;\n      } else {\n        // recupera dados do produto por id\n        const product = await api.get(`/products/${productId}`); // cria objeto newProduct para ser inserido no carrinho\n\n        const newProduct = { ...product.data,\n          amount: 1\n        }; // atualiza carrinho com novo produto.\n\n        updatedCart.push(newProduct);\n      } // atualiza hook\n\n\n      setCart(updatedCart); // incluindo efetivamente na storage\n\n      localStorage.setItem(\"@RocketShoes:cart\", JSON.stringify(updatedCart));\n    } catch {\n      // Todo: Tratando error: \"Product not exist/finished at Stock \"\n      toast.error(\"Erro na adição do produto\");\n    }\n  };\n\n  const removeProduct = productId => {\n    try {\n      // recuperando itens do carrinho atual\n      const updatedCart = cart.map(product => ({ ...product\n      })); // recuperando index do produto a ser removido\n\n      const productIdx = updatedCart.findIndex(product => product.id === productId); // se encontrou \n\n      if (productIdx >= 0) {\n        // remove produto \n        updatedCart.splice(productIdx, 1); // atualiza hook\n\n        setCart(updatedCart); // salva na localStorage\n\n        localStorage.setItem(\"@RocketShoes:cart\", JSON.stringify(updatedCart));\n      } else {\n        throw Error();\n      }\n    } catch {\n      // Todo: Tratando error: \"Product not encontrado no carrinho\"\n      toast.error(\"Erro na remoção do produto\");\n    }\n  };\n\n  const updateProductAmount = async ({\n    productId,\n    amount\n  }) => {\n    try {\n      // se for para alterar para 0, deve excluir.\n      if (amount < 1) {\n        return;\n      } //pegar item em estoque pelo id do produto\n\n\n      const stock = await api.get(`/stock/${productId}`); //checar quantia no estoque\n\n      const stockAmount = stock.data.amount; // verifica disponibilidade\n\n      if (amount > stockAmount) {\n        toast.error(\"Quantidade solicitada fora de estoque\");\n        return;\n      } // recuperando itens do carrinho atual\n\n\n      const updatedCart = cart.map(product => ({ ...product\n      })); // recupera produto do carrinho atual\n\n      const productAlreadyExist = updatedCart.find(item => item.id === productId); // se recuperou\n\n      if (productAlreadyExist) {\n        //altera a quantidade no produto ja existente\n        productAlreadyExist.amount = amount; // atualiza hook\n\n        setCart(updatedCart); // atualiza localStorage\n\n        localStorage.setItem(\"@RocketShoes:cart\", JSON.stringify(updatedCart));\n      } else {\n        throw Error();\n      }\n    } catch {\n      toast.error(\"Erro na alteração de quantidade do produto\");\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: {\n      cart,\n      addProduct,\n      removeProduct,\n      updateProductAmount\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 190,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CartProvider, \"WPuZXRch1guWlyW9gVeZHsEonvA=\");\n\n_c = CartProvider;\nexport function useCart() {\n  _s2();\n\n  const context = useContext(CartContext);\n  return context;\n}\n\n_s2(useCart, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"sources":["/home/andre/zAlclopes/MyIgnite/React/Desafios/0201_AddShop/addShop_React/src/hooks/useCart.tsx"],"names":["createContext","useContext","useState","toast","api","CartContext","CartProvider","children","cart","setCart","storagedCart","localStorage","getItem","JSON","parse","addProduct","productId","updatedCart","map","product","stock","get","stockAmount","data","amount","error","productAlreadyExist","find","item","id","currentAmount","newProduct","push","setItem","stringify","removeProduct","productIdx","findIndex","splice","Error","updateProductAmount","useCart","context"],"mappings":"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","sourcesContent":["// tags: #alterado21/09/2021# - OK\n\nimport { createContext, ReactNode, useContext, useState } from 'react';\nimport { toast } from 'react-toastify';\nimport { api } from '../services/api';\nimport { Product, Stock } from '../types';\n\n// interface para receber qualquer elemento que venha como children do provider\ninterface CartProviderProps {\n  children: ReactNode;\n}\n\n// interface com dados para alterar o contexto do carrinho\ninterface UpdateProductAmount {\n  productId: number;\n  amount: number;\n}\n\n// interface que irá manter o contexto (browser, dados e funcionalidades)\ninterface CartContextData {\n  cart: Product[];\n  addProduct: (productId: number) => Promise<void>;\n  removeProduct: (productId: number) => void;\n  updateProductAmount: ({ productId, amount }: UpdateProductAmount) => void;\n}\n\n// criando contexto vazio\nconst CartContext = createContext<CartContextData>({} as CartContextData);\n\n// criando provider (CartProvider) será usado para encapsular no App\nexport function CartProvider({ children }: CartProviderProps): JSX.Element {\n\n  // criando hook do carrinho\n  const [cart, setCart] = useState<Product[]>(() => {\n\n    // recuperando carrinho na storage - Andre - 21/09/2021\n    const storagedCart = localStorage.getItem('@RocketShoes:cart');\n    \n    // a storage armazena em texto convertendo para json\n    if (storagedCart) {\n      return JSON.parse(storagedCart);\n    }\n    return [];\n  });\n\n  // incluindo produto no carrinho, depois na storage - Andre - 21/09/2021\n  const addProduct = async (productId: number) => {\n    try {\n      // recuperando itens do carrinho atual\n      const updatedCart = cart.map((product) => ({ ...product}))\n\n      // recuperando quantidae de produto no estoque\n      const stock = await api.get(`/stock/${productId}`)\n      \n      // BoaPratica: Bloquear quantidade de produto no estoque\n\n      //recuperando quantia no estoque do produto\n      const stockAmount = stock.data.amount;\n\n      if ( stockAmount < 1) {\n        toast.error(\"Quantidade solicitada fora de estoque\");\n        return;\n      }\n\n      // recuperando produto se já existir no carrinho atual \n      const productAlreadyExist = updatedCart.find((item) => item.id === productId)\n\n      // se recuperou produto\n      if (productAlreadyExist) {\n\n        // recuperando quantidade do produto já no carrinho carrinho\n        const currentAmount = productAlreadyExist ? productAlreadyExist.amount : 0;\n\n        //Incrementa montante do item\n        const amount = currentAmount + 1;\n\n        //checar montante em relação ao estoque\n        if (amount > stockAmount) {\n          toast.error(\"Quantidade solicitada fora de estoque\");\n          return;\n        }\n\n        // atualiza montante no item existente\n        productAlreadyExist.amount = amount;\n\n      } else {\n\n        // recupera dados do produto por id\n        const product = await api.get(`/products/${productId}`);\n\n        // cria objeto newProduct para ser inserido no carrinho\n        const newProduct = {\n          ...product.data,\n          amount: 1,\n        };\n\n        // atualiza carrinho com novo produto.\n        updatedCart.push(newProduct);\n      }\n\n      // atualiza hook\n      setCart(updatedCart);\n\n      // incluindo efetivamente na storage\n      localStorage.setItem(\"@RocketShoes:cart\", JSON.stringify(updatedCart));\n\n     } catch {\n      // Todo: Tratando error: \"Product not exist/finished at Stock \"\n      toast.error(\"Erro na adição do produto\");\n    }\n  };\n\n  const removeProduct = (productId: number) => {\n    try {\n\n      // recuperando itens do carrinho atual\n      const updatedCart = cart.map((product) => ({ ...product }));\n\n      // recuperando index do produto a ser removido\n      const productIdx = updatedCart.findIndex(\n        (product) => product.id === productId\n      );\n\n      // se encontrou \n      if (productIdx >= 0) {\n        \n        // remove produto \n        updatedCart.splice(productIdx, 1);\n        // atualiza hook\n        setCart(updatedCart);\n\n        // salva na localStorage\n        localStorage.setItem(\"@RocketShoes:cart\", JSON.stringify(updatedCart));\n\n      } else {\n\n        throw Error();\n      }\n    } catch {\n      // Todo: Tratando error: \"Product not encontrado no carrinho\"\n      toast.error(\"Erro na remoção do produto\");\n    }\n  };\n\n  const updateProductAmount = async (\n  {productId, amount }: UpdateProductAmount) => {\n    try {\n\n      // se for para alterar para 0, deve excluir.\n      if (amount < 1) {\n        return;\n      }\n\n      //pegar item em estoque pelo id do produto\n      const stock = await api.get(`/stock/${productId}`);\n\n      //checar quantia no estoque\n      const stockAmount = stock.data.amount;\n\n      // verifica disponibilidade\n      if (amount > stockAmount) {\n        toast.error(\"Quantidade solicitada fora de estoque\");\n        return;\n      }\n\n      // recuperando itens do carrinho atual\n      const updatedCart = cart.map((product) => ({ ...product }));\n\n      // recupera produto do carrinho atual\n      const productAlreadyExist = updatedCart.find((item) => item.id === productId);\n\n      // se recuperou\n      if (productAlreadyExist) {\n\n        //altera a quantidade no produto ja existente\n        productAlreadyExist.amount = amount;\n        // atualiza hook\n        setCart(updatedCart);\n        // atualiza localStorage\n        localStorage.setItem(\"@RocketShoes:cart\", JSON.stringify(updatedCart));\n      } else {\n        throw Error();\n      }\n    } catch {\n      toast.error(\"Erro na alteração de quantidade do produto\");\n    }\n  };\n\n  return (\n    <CartContext.Provider\n      value={{ cart, addProduct, removeProduct, updateProductAmount }}\n    >\n      {children}\n    </CartContext.Provider>\n  );\n}\n\nexport function useCart(): CartContextData {\n  const context = useContext(CartContext);\n\n  return context;\n}\n"]},"metadata":{},"sourceType":"module"}