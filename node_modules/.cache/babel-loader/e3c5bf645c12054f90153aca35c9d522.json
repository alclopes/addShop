{"ast":null,"code":"var _jsxFileName = \"/home/andre/zAlclopes/MyIgnite/React/Desafios/0201_AddShop/addShop_React/src/hooks/useCart.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { createContext, useContext, useState } from 'react';\nimport { api } from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CartContext = /*#__PURE__*/createContext({});\nexport function CartProvider({\n  children\n}) {\n  _s();\n\n  const [cart, setCart] = useState(() => {\n    // recuperando item na storage - Andre - 21/09/2021\n    const storagedCart = localStorage.getItem('@RocketShoes:cart');\n\n    if (storagedCart) {\n      return JSON.parse(storagedCart);\n    }\n\n    return [];\n  }); // incluindo produto na storage - Andre - 21/09/2021\n\n  const addProduct = async productId => {\n    try {\n      // recuperando itens do carrinho atual\n      const updatedCart = cart.map(product => ({ ...product\n      })); // novo produto existe no carrinho atual\n\n      const productAlreadyExist = updatedCart.find(item => item.id === productId); // novo produto existe no estoque\n\n      const stock = await api.get(`/stock/${productId}`); // Todo: Tratando error: \"Product not exist/finished at Stock \"\n      // \n\n      const stockAmount = stock.data.amount;\n    } catch {// Todo: Tratando error: \"Product not exist/finished at Stock \"\n      // \n    }\n  };\n\n  const removeProduct = productId => {\n    try {// TODO\n    } catch {// TODO\n    }\n  };\n\n  const updateProductAmount = async ({\n    productId,\n    amount\n  }) => {\n    try {// TODO\n    } catch {// TODO\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: {\n      cart,\n      addProduct,\n      removeProduct,\n      updateProductAmount\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CartProvider, \"08Raoh4VFbEK6Z/HPkwU/xTL6HE=\");\n\n_c = CartProvider;\nexport function useCart() {\n  _s2();\n\n  const context = useContext(CartContext);\n  return context;\n}\n\n_s2(useCart, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"sources":["/home/andre/zAlclopes/MyIgnite/React/Desafios/0201_AddShop/addShop_React/src/hooks/useCart.tsx"],"names":["createContext","useContext","useState","api","CartContext","CartProvider","children","cart","setCart","storagedCart","localStorage","getItem","JSON","parse","addProduct","productId","updatedCart","map","product","productAlreadyExist","find","item","id","stock","get","stockAmount","data","amount","removeProduct","updateProductAmount","useCart","context"],"mappings":";;;;AAAA,SAASA,aAAT,EAAmCC,UAAnC,EAA+CC,QAA/C,QAA+D,OAA/D;AAEA,SAASC,GAAT,QAAoB,iBAApB;;AAmBA,MAAMC,WAAW,gBAAGJ,aAAa,CAAkB,EAAlB,CAAjC;AAEA,OAAO,SAASK,YAAT,CAAsB;AAAEC,EAAAA;AAAF,CAAtB,EAAoE;AAAA;;AACzE,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBN,QAAQ,CAAY,MAAM;AAEhD;AACA,UAAMO,YAAY,GAAGC,YAAY,CAACC,OAAb,CAAqB,mBAArB,CAArB;;AAEA,QAAIF,YAAJ,EAAkB;AAChB,aAAOG,IAAI,CAACC,KAAL,CAAWJ,YAAX,CAAP;AACD;;AAED,WAAO,EAAP;AACD,GAV+B,CAAhC,CADyE,CAazE;;AACA,QAAMK,UAAU,GAAG,MAAOC,SAAP,IAA6B;AAC9C,QAAI;AACF;AACA,YAAMC,WAAW,GAAGT,IAAI,CAACU,GAAL,CAAUC,OAAD,KAAc,EAAE,GAAGA;AAAL,OAAd,CAAT,CAApB,CAFE,CAGF;;AACA,YAAMC,mBAAmB,GAAGH,WAAW,CAACI,IAAZ,CAAkBC,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYP,SAAvC,CAA5B,CAJE,CAKF;;AACA,YAAMQ,KAAK,GAAG,MAAMpB,GAAG,CAACqB,GAAJ,CAAS,UAAST,SAAU,EAA5B,CAApB,CANE,CAOF;AACA;;AACA,YAAMU,WAAW,GAAGF,KAAK,CAACG,IAAN,CAAWC,MAA/B;AAIA,KAbF,CAaG,MAAM,CACP;AACA;AAED;AACF,GAnBD;;AAqBA,QAAMC,aAAa,GAAIb,SAAD,IAAuB;AAC3C,QAAI,CACF;AACD,KAFD,CAEE,MAAM,CACN;AACD;AACF,GAND;;AAQA,QAAMc,mBAAmB,GAAG,OAAO;AACjCd,IAAAA,SADiC;AAEjCY,IAAAA;AAFiC,GAAP,KAGD;AACzB,QAAI,CACF;AACD,KAFD,CAEE,MAAM,CACN;AACD;AACF,GATD;;AAWA,sBACE,QAAC,WAAD,CAAa,QAAb;AACE,IAAA,KAAK,EAAE;AAAEpB,MAAAA,IAAF;AAAQO,MAAAA,UAAR;AAAoBc,MAAAA,aAApB;AAAmCC,MAAAA;AAAnC,KADT;AAAA,cAGGvB;AAHH;AAAA;AAAA;AAAA;AAAA,UADF;AAOD;;GA7DeD,Y;;KAAAA,Y;AA+DhB,OAAO,SAASyB,OAAT,GAAoC;AAAA;;AACzC,QAAMC,OAAO,GAAG9B,UAAU,CAACG,WAAD,CAA1B;AAEA,SAAO2B,OAAP;AACD;;IAJeD,O","sourcesContent":["import { createContext, ReactNode, useContext, useState } from 'react';\nimport { toast } from 'react-toastify';\nimport { api } from '../services/api';\nimport { Product, Stock } from '../types';\n\ninterface CartProviderProps {\n  children: ReactNode;\n}\n\ninterface UpdateProductAmount {\n  productId: number;\n  amount: number;\n}\n\ninterface CartContextData {\n  cart: Product[];\n  addProduct: (productId: number) => Promise<void>;\n  removeProduct: (productId: number) => void;\n  updateProductAmount: ({ productId, amount }: UpdateProductAmount) => void;\n}\n\nconst CartContext = createContext<CartContextData>({} as CartContextData);\n\nexport function CartProvider({ children }: CartProviderProps): JSX.Element {\n  const [cart, setCart] = useState<Product[]>(() => {\n\n    // recuperando item na storage - Andre - 21/09/2021\n    const storagedCart = localStorage.getItem('@RocketShoes:cart');\n\n    if (storagedCart) {\n      return JSON.parse(storagedCart);\n    }\n\n    return [];\n  });\n\n  // incluindo produto na storage - Andre - 21/09/2021\n  const addProduct = async (productId: number) => {\n    try {\n      // recuperando itens do carrinho atual\n      const updatedCart = cart.map((product) => ({ ...product}))\n      // novo produto existe no carrinho atual\n      const productAlreadyExist = updatedCart.find((item) => item.id === productId)\n      // novo produto existe no estoque\n      const stock = await api.get(`/stock/${productId}`)\n      // Todo: Tratando error: \"Product not exist/finished at Stock \"\n      // \n      const stockAmount = stock.data.amount\n\n\n\n     } catch {\n      // Todo: Tratando error: \"Product not exist/finished at Stock \"\n      // \n\n    }\n  };\n\n  const removeProduct = (productId: number) => {\n    try {\n      // TODO\n    } catch {\n      // TODO\n    }\n  };\n\n  const updateProductAmount = async ({\n    productId,\n    amount,\n  }: UpdateProductAmount) => {\n    try {\n      // TODO\n    } catch {\n      // TODO\n    }\n  };\n\n  return (\n    <CartContext.Provider\n      value={{ cart, addProduct, removeProduct, updateProductAmount }}\n    >\n      {children}\n    </CartContext.Provider>\n  );\n}\n\nexport function useCart(): CartContextData {\n  const context = useContext(CartContext);\n\n  return context;\n}\n"]},"metadata":{},"sourceType":"module"}